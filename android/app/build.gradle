plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace = "com.dermochelys.acidwarp"
    compileSdkVersion = 36
    buildToolsVersion = "36.1.0"
    ndkVersion = "29.0.14206865"

    defaultConfig {
        minSdkVersion 29
        targetSdkVersion 36

        // No need to have a sophisticated versionCode scheme for this app, as without
        // a formal release schedule there is no need to support hotfix versioning.
        // Thus, we just monotonically increase with every release.
        versionCode 18

        versionName "5.0.0+18"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets.main {
        jniLibs.srcDir 'libs'
    }

    externalNativeBuild {
        cmake {
            // Hold this back due to Github actions failing on 4.0.2+.
            // Note: Ubuntu 25.04 bundles 3.31.6
            // See: https://github.com/actions/runner-images/blob/main/images/ubuntu/toolsets/toolset-2404.json
            version = "3.31.6"
            path 'jni/CMakeLists.txt'
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs.add("-Werror")
    }

    kotlin {
        jvmToolchain {
            languageVersion.set(JavaLanguageVersion.of(21))
        }
    }

    buildFeatures {
        prefab = true
    }

    lint {
        warningsAsErrors = true

        // This is needed when a new Kotlin version is out but the corresponding KSP version is not
        disable += "NewerVersionAvailable"
        disable += "GradleDependency"
    }
}

dependencies {
    implementation fileTree(include: ['*.aar'], dir: 'libs')

    androidTestImplementation libs.junit
    androidTestImplementation libs.junit.ktx
    androidTestImplementation libs.espresso.core
    androidTestImplementation libs.runner
    androidTestImplementation libs.rules
    androidTestImplementation libs.uiautomator
}

// Task to download SDL3 .aar if not present
abstract class DownloadSDL3Task extends DefaultTask {
    @InputFile
    abstract RegularFileProperty getSdlVersionFile()

    @OutputDirectory
    abstract DirectoryProperty getLibsDir()

    @Inject
    abstract FileSystemOperations getFileSystemOperations()

    @Inject
    abstract ArchiveOperations getArchiveOperations()

    @TaskAction
    void downloadSDL3() {
        def versionFile = sdlVersionFile.get().asFile
        if (!versionFile.exists()) {
            throw new GradleException("SDL_VERSION file not found at ${versionFile.absolutePath}")
        }

        def sdlVersion = versionFile.text.trim()
        def expectedAar = "SDL3-${sdlVersion}.aar"
        def libsDirectory = libsDir.get().asFile

        // Check for existing SDL3 .aar files (avoid closures for config cache)
        def allFiles = libsDirectory.listFiles()
        def existingAars = []
        if (allFiles != null) {
            for (def file : allFiles) {
                if (file.name.startsWith('SDL3-') && file.name.endsWith('.aar')) {
                    existingAars.add(file)
                }
            }
        }

        // If the correct version exists, we're done
        def correctAarExists = false
        for (def aar : existingAars) {
            if (aar.name == expectedAar) {
                correctAarExists = true
                break
            }
        }

        if (correctAarExists) {
            println "SDL3 ${sdlVersion} already present"
            return
        }

        // Clean up old SDL3 versions
        for (def oldAar : existingAars) {
            println "Removing old SDL3 version: ${oldAar.name}"
            oldAar.delete()
        }

        // Download the new version
        println "Downloading SDL3 ${sdlVersion} for Android..."
        def zipUrl = "https://github.com/libsdl-org/SDL/releases/download/release-${sdlVersion}/SDL3-devel-${sdlVersion}-android.zip"
        def zipFile = new File(libsDirectory, "${expectedAar}.zip")

        // Download zip file without closures
        def inputStream = new URL(zipUrl).openStream()
        def outputStream = new FileOutputStream(zipFile)
        try {
            byte[] buffer = new byte[8192]
            int bytesRead
            while ((bytesRead = inputStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, bytesRead)
            }
        } finally {
            inputStream.close()
            outputStream.close()
        }

        println "Extracting SDL3 .aar..."
        // Extract the .aar from the zip using ArchiveOperations (config cache compatible)
        def zipTree = archiveOperations.zipTree(zipFile)
        fileSystemOperations.copy {
            from(zipTree) {
                include "**/${expectedAar}"
                eachFile {
                    it.path = it.name  // Flatten directory structure
                }
            }
            into libsDirectory
            includeEmptyDirs = false
        }

        // Clean up zip file
        zipFile.delete()

        println "SDL3 ${sdlVersion} downloaded successfully"
    }
}

tasks.register('downloadSDL3', DownloadSDL3Task) {
    sdlVersionFile = layout.projectDirectory.file('../../SDL_VERSION')
    libsDir = layout.projectDirectory.dir('libs')
}

// Make sure SDL3 is downloaded before building
tasks.named('preBuild').configure {
    dependsOn 'downloadSDL3'
}
