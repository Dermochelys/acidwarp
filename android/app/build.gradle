plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace = "com.dermochelys.acidwarp"
    compileSdkVersion = 36
    buildToolsVersion = "36.1.0"
    ndkVersion = "29.0.14206865"

    defaultConfig {
        minSdkVersion 29
        targetSdkVersion 36

        // No need to have a sophisticated versionCode scheme for this app, as without
        // a formal release schedule there is no need to support hotfix versioning.
        // Thus, we just monotonically increase with every release.
        versionCode 18

        versionName "5.0.0+18"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets.main {
        jniLibs.srcDir 'libs'
    }

    externalNativeBuild {
        cmake {
            // Hold this back due to Github actions failing on 4.0.2+.
            // Note: Ubuntu 25.04 bundles 3.31.6
            // See: https://github.com/actions/runner-images/blob/main/images/ubuntu/toolsets/toolset-2404.json
            version = "3.31.6"
            path 'jni/CMakeLists.txt'
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs.add("-Werror")
    }

    kotlin {
        jvmToolchain {
            languageVersion.set(JavaLanguageVersion.of(21))
        }
    }

    buildFeatures {
        prefab = true
    }

    lint {
        warningsAsErrors = true

        // This is needed when a new Kotlin version is out but the corresponding KSP version is not
        disable += "NewerVersionAvailable"
        disable += "GradleDependency"
    }
}

dependencies {
    implementation fileTree(include: ['*.aar'], dir: 'libs')

    androidTestImplementation libs.junit
    androidTestImplementation libs.junit.ktx
    androidTestImplementation libs.espresso.core
    androidTestImplementation libs.runner
    androidTestImplementation libs.rules
    androidTestImplementation libs.uiautomator
}

// Task to download SDL3 and SDL3_image .aar files if not present
abstract class DownloadSDL3Task extends DefaultTask {
    @InputFile
    abstract RegularFileProperty getSdlVersionFile()

    @InputFile
    abstract RegularFileProperty getSdlImageVersionFile()

    @OutputDirectory
    abstract DirectoryProperty getLibsDir()

    @Inject
    abstract FileSystemOperations getFileSystemOperations()

    @Inject
    abstract ArchiveOperations getArchiveOperations()

    @TaskAction
    void downloadSDL3() {
        def sdlVersionFile = this.sdlVersionFile.get().asFile
        def sdlImageVersionFile = this.sdlImageVersionFile.get().asFile
        
        if (!sdlVersionFile.exists()) {
            throw new GradleException("SDL_VERSION file not found at ${sdlVersionFile.absolutePath}")
        }
        if (!sdlImageVersionFile.exists()) {
            throw new GradleException("SDL3_IMAGE_VERSION file not found at ${sdlImageVersionFile.absolutePath}")
        }

        def sdlVersion = sdlVersionFile.text.trim()
        def sdlImageVersion = sdlImageVersionFile.text.trim()
        def expectedSdlAar = "SDL3-${sdlVersion}.aar"
        def expectedSdlImageAar = "SDL3_image-${sdlImageVersion}.aar"
        def libsDirectory = libsDir.get().asFile

        // Check for existing SDL3 .aar files (avoid closures for config cache)
        def allFiles = libsDirectory.listFiles()
        def existingSdlAars = []
        def existingSdlImageAars = []
        if (allFiles != null) {
            for (def file : allFiles) {
                if (file.name.startsWith('SDL3-') && file.name.endsWith('.aar') && !file.name.startsWith('SDL3_image-')) {
                    existingSdlAars.add(file)
                } else if (file.name.startsWith('SDL3_image-') && file.name.endsWith('.aar')) {
                    existingSdlImageAars.add(file)
                }
            }
        }

        // Check if correct SDL3 version exists
        def correctSdlAarExists = false
        for (def aar : existingSdlAars) {
            if (aar.name == expectedSdlAar) {
                correctSdlAarExists = true
                break
            }
        }

        // Check if correct SDL3_image version exists
        def correctSdlImageAarExists = false
        for (def aar : existingSdlImageAars) {
            if (aar.name == expectedSdlImageAar) {
                correctSdlImageAarExists = true
                break
            }
        }

        // Download SDL3 if needed
        if (!correctSdlAarExists) {
            // Clean up old SDL3 versions
            for (def oldAar : existingSdlAars) {
                println "Removing old SDL3 version: ${oldAar.name}"
                oldAar.delete()
            }

            // Download the new version
            println "Downloading SDL3 ${sdlVersion} for Android..."
            def zipUrl = "https://github.com/libsdl-org/SDL/releases/download/release-${sdlVersion}/SDL3-devel-${sdlVersion}-android.zip"
            def zipFile = new File(libsDirectory, "${expectedSdlAar}.zip")

            // Download zip file without closures
            def inputStream = new URL(zipUrl).openStream()
            def outputStream = new FileOutputStream(zipFile)
            try {
                byte[] buffer = new byte[8192]
                int bytesRead
                while ((bytesRead = inputStream.read(buffer)) != -1) {
                    outputStream.write(buffer, 0, bytesRead)
                }
            } finally {
                inputStream.close()
                outputStream.close()
            }

            println "Extracting SDL3 .aar..."
            // Extract the .aar from the zip using ArchiveOperations (config cache compatible)
            def zipTree = archiveOperations.zipTree(zipFile)
            fileSystemOperations.copy {
                from(zipTree) {
                    include "**/${expectedSdlAar}"
                    eachFile {
                        it.path = it.name  // Flatten directory structure
                    }
                }
                into libsDirectory
                includeEmptyDirs = false
            }

            // Clean up zip file
            zipFile.delete()

            println "SDL3 ${sdlVersion} downloaded successfully"
        } else {
            println "SDL3 ${sdlVersion} already present"
        }

        // Download SDL3_image if needed
        if (!correctSdlImageAarExists) {
            // Clean up old SDL3_image versions
            for (def oldAar : existingSdlImageAars) {
                println "Removing old SDL3_image version: ${oldAar.name}"
                oldAar.delete()
            }

            // Download the new version
            println "Downloading SDL3_image ${sdlImageVersion} for Android..."
            def zipUrl = "https://github.com/libsdl-org/SDL_image/releases/download/release-${sdlImageVersion}/SDL3_image-devel-${sdlImageVersion}-android.zip"
            def zipFile = new File(libsDirectory, "${expectedSdlImageAar}.zip")

            // Download zip file without closures
            def inputStream = new URL(zipUrl).openStream()
            def outputStream = new FileOutputStream(zipFile)
            try {
                byte[] buffer = new byte[8192]
                int bytesRead
                while ((bytesRead = inputStream.read(buffer)) != -1) {
                    outputStream.write(buffer, 0, bytesRead)
                }
            } finally {
                inputStream.close()
                outputStream.close()
            }

            println "Extracting SDL3_image .aar..."
            // Extract the .aar from the zip using ArchiveOperations (config cache compatible)
            def zipTree = archiveOperations.zipTree(zipFile)
            fileSystemOperations.copy {
                from(zipTree) {
                    include "**/${expectedSdlImageAar}"
                    eachFile {
                        it.path = it.name  // Flatten directory structure
                    }
                }
                into libsDirectory
                includeEmptyDirs = false
            }

            // Clean up zip file
            zipFile.delete()

            println "SDL3_image ${sdlImageVersion} downloaded successfully"
        } else {
            println "SDL3_image ${sdlImageVersion} already present"
        }
    }
}

tasks.register('downloadSDL3', DownloadSDL3Task) {
    sdlVersionFile = layout.projectDirectory.file('../../SDL_VERSION')
    sdlImageVersionFile = layout.projectDirectory.file('../../SDL3_IMAGE_VERSION')
    libsDir = layout.projectDirectory.dir('libs')
}

// Make sure SDL3 is downloaded before building
tasks.named('preBuild').configure {
    dependsOn 'downloadSDL3'
}
