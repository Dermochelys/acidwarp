plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace = "com.dermochelys.acidwarp"
    compileSdkVersion = 36
    buildToolsVersion = "36.1.0"
    ndkVersion = "29.0.14206865"

    defaultConfig {
        minSdkVersion 29
        targetSdkVersion 36

        // No need to have a sophisticated versionCode scheme for this app, as without
        // a formal release schedule there is no need to support hotfix versioning.
        // Thus, we just monotonically increase with every release.
        versionCode 18

        versionName "5.0.0+18"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets.main {
        jniLibs.srcDir 'libs'
    }

    externalNativeBuild {
        cmake {
            // Hold this back due to Github actions failing on 4.0.2+.
            // Note: Ubuntu 25.04 bundles 3.31.6
            // See: https://github.com/actions/runner-images/blob/main/images/ubuntu/toolsets/toolset-2404.json
            version = "3.31.6"
            path 'jni/CMakeLists.txt'
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs.add("-Werror")
    }

    kotlin {
        jvmToolchain {
            languageVersion.set(JavaLanguageVersion.of(21))
        }
    }

    buildFeatures {
        prefab = true
    }

    lint {
        warningsAsErrors = true

        // This is needed when a new Kotlin version is out but the corresponding KSP version is not
        disable += "NewerVersionAvailable"
        disable += "GradleDependency"
    }
}

dependencies {
    implementation fileTree(include: ['*.aar'], dir: 'libs')

    androidTestImplementation libs.junit
    androidTestImplementation libs.junit.ktx
    androidTestImplementation libs.espresso.core
    androidTestImplementation libs.runner
    androidTestImplementation libs.rules
    androidTestImplementation libs.uiautomator
}

// Task to download SDL3 .aar if not present
tasks.register('downloadSDL3') {
    doLast {
        def sdlVersionFile = file('../../SDL_VERSION')
        if (!sdlVersionFile.exists()) {
            throw new GradleException("SDL_VERSION file not found at ${sdlVersionFile.absolutePath}")
        }

        def sdlVersion = sdlVersionFile.text.trim()
        def expectedAar = "SDL3-${sdlVersion}.aar"
        def libsDir = file('libs')

        // Check for existing SDL3 .aar files
        def existingAars = libsDir.listFiles { dir, name ->
            name.startsWith('SDL3-') && name.endsWith('.aar')
        }

        // If the correct version exists, we're done
        def correctAarExists = existingAars?.any { it.name == expectedAar }
        if (correctAarExists) {
            println "SDL3 ${sdlVersion} already present"
            return
        }

        // Clean up old SDL3 versions
        existingAars?.each { oldAar ->
            println "Removing old SDL3 version: ${oldAar.name}"
            oldAar.delete()
        }

        // Download the new version
        println "Downloading SDL3 ${sdlVersion} for Android..."
        def zipUrl = "https://github.com/libsdl-org/SDL/releases/download/release-${sdlVersion}/SDL3-devel-${sdlVersion}-android.zip"
        def zipFile = file("${libsDir}/${expectedAar}.zip")

        // Download zip file
        new URL(zipUrl).withInputStream { input ->
            zipFile.withOutputStream { output ->
                output << input
            }
        }

        println "Extracting SDL3 .aar..."
        // Extract the .aar from the zip
        ant.unzip(src: zipFile, dest: libsDir) {
            patternset {
                include(name: "**/${expectedAar}")
            }
            mapper(type: 'flatten')
        }

        // Clean up zip file
        zipFile.delete()

        println "SDL3 ${sdlVersion} downloaded successfully"
    }
}

// Make sure SDL3 is downloaded before building
tasks.named('preBuild').configure {
    dependsOn 'downloadSDL3'
}
